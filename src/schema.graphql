union SearchResult = Book | Author

type Query {
  authors: [Author!]
  author(authorId: ID!): Author

  books: [Book!]
  book(bookId: ID!): Book

  reviews: [Review!]
  review(reviewId: ID!): Review

  search(contains: String!): [SearchResult!]
}

type Author {
  id: ID!
  name: String!
  verified: Boolean!
  reviews: [Review!]
}

type Book {
  id: ID!
  title: String!
  characters: [String!]!
  reviews: [Review!]
}

type Review {
  id: ID!
  rating: Int!
  content: String!
  bookId: String!
  authorId: String!
  book: Book!
  author: Author
}

interface MutationResponse {
  code: String
  success: Boolean
  message: String
}

type AddBookMutationResponse implements MutationResponse {
  code: String
  success: Boolean
  message: String
  book: Book
  id: ID!
}

type UpdateBookMutationResponse implements MutationResponse {
  code: String
  success: Boolean
  message: String
  book: Book
  id: ID!
}

type DeleteBookMutationResponse implements MutationResponse {
  code: String
  success: Boolean
  message: String
  id: ID!
}

input AddBookInput {
  title: String!
  characters: [String!]!
}

input UpdateBookInput {
  title: String
  characters: [String!]
}

type Mutation {
  addBook(book: AddBookInput!): AddBookMutationResponse

  updateBook(bookId: ID!, book: UpdateBookInput!): UpdateBookMutationResponse

  deleteBook(bookId: ID!): DeleteBookMutationResponse
}
